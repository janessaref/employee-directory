{"version":3,"sources":["utils/API.js","utils/EmployeeContext.js","utils/Variables.js","components/TableHeader/index.js","components/TableRow/index.js","components/TableBody/index.js","components/Table/index.js","components/Container/index.js","pages/Gallery.js","components/Header/index.js","components/Search/index.js","utils/Reducer.js","App.js","reportWebVitals.js","index.js"],"names":["Promise","resolve","reject","axios","get","then","res","results","data","map","employee","firstname","name","first","lastname","last","email","picture","medium","phone","dob","date","catch","err","EmployeeContext","React","createContext","store","dispatch","console","log","SORT_EMPLOYEES_ASCEND","SORT_EMPLOYEES_DESCEND","CLEAR_SEARCH","SEARCH_EMPLOYEES","ALL_EMPLOYEES","TableHeader","useContext","className","scope","onClick","type","payload","TableRow","image","firstName","lastName","src","alt","href","TableBody","selectedEmployees","i","Date","toLocaleDateString","Table","Container","Gallery","useEffect","API","employees","Header","Search","useState","search","setSearch","for","value","onChange","e","target","id","placeholder","preventDefault","reducer","state","action","filter","toLowerCase","includes","sort","a","b","Error","App","useReducer","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64061c44.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// grabbing the list of our employees using an axios call\n export default {\n    getEmployeesList: function() {\n            return new Promise((resolve, reject) => {\n                // axios call from the randomuser API with query parameters of gender, name, email, picture, date of birth, phone number with employees of US nationality and setting the number of results to 30\n                axios.get(\"https://randomuser.me/api/?inc=gender,name,email,picture,dob,phone&results=30&nat=us\").then((res) => {\n                    const employees = res.data.results;\n                    // maps through each employee in the axios call and grabbing the results\n                    const results = employees.map((employee) => {\n                    return {\n                        firstname: employee.name.first,\n                        lastname: employee.name.last,\n                        email: employee.email,\n                        picture: employee.picture.medium,\n                        phone: employee.phone,\n                        dob: employee.dob.date\n                    };\n                    });\n                    resolve(results);\n                }).catch((err) => reject(err));\n        });\n      },\n};","import React from \"react\";\n\n// exporting our employee context\nconst EmployeeContext = React.createContext({\n    store: {},\n    dispatch: () => {\n        console.log(\"must implement context\");\n    }\n});\n  \n  export default EmployeeContext;","// our action variables set as constant variables\n\nexport const SORT_EMPLOYEES_ASCEND = \"ascend\";\nexport const SORT_EMPLOYEES_DESCEND = \"descend\";\nexport const CLEAR_SEARCH = \"clear\";\nexport const SEARCH_EMPLOYEES = \"search\";\nexport const ALL_EMPLOYEES = \"loading\";\n\n\n\n\n","import React, { useContext } from \"react\";\nimport EmployeeContext from \"../../utils/EmployeeContext\";\nimport \"./style.css\";\nimport  { SORT_EMPLOYEES_ASCEND, SORT_EMPLOYEES_DESCEND }  from \"../../utils/Variables\";\n\n// Main Table Header of the table and allows user to sort employees by first name\nfunction TableHeader() {\n    const { dispatch } = useContext(EmployeeContext);\n  return (\n    <thead className=\"tableHeader\">\n        <tr>\n            <th scope=\"col\">Image</th>\n            <th scope=\"col\" className=\"employeeName\">Name\n                <button \n                    className=\"btn btn-dark ascend\" \n                    onClick={() => dispatch({type: SORT_EMPLOYEES_ASCEND, payload: \"name\"})}>\n                        (A-Z)\n                </button>\n                <button \n                    className=\"btn btn-dark descend\" \n                    onClick={() => dispatch({type: SORT_EMPLOYEES_DESCEND, payload: \"name\"})}>\n                        (Z-A)\n                </button>\n            </th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Phone Number</th>\n            <th scope=\"col\">Date of Birth</th>\n        </tr>\n    </thead>\n    );\n};\n\nexport default TableHeader;","import React from \"react\";\nimport \"./style.css\";\n\n// This is creating each row for each employee with all their data\nfunction TableRow({image, firstName, lastName, email, phone, dob}) {\n  return (\n    <tr>\n        <td>\n            <img src={image} alt={firstName}></img>\n        </td>\n        <td>{firstName} {lastName}</td>\n        <td>\n            <a className=\"employeeEmail\" href={`mailto:${email}`}>{email}\n            </a>\n        </td>\n        <td>\n            <a className=\"employeePhone\" href={`tel:${phone}`}>{phone}\n            </a>\n        </td>\n        <td>{dob}</td>\n    </tr>\n    );\n};\n\nexport default TableRow;\n","import React, { useContext } from \"react\";\nimport EmployeeContext from \"../../utils/EmployeeContext\";\nimport TableRow from \"../TableRow\";\n\n// Table Body component that is wrapped around the table rows for each employee\nfunction TableBody() {\n    // importing store to grab employee data and mapping through each employee to display their information\n    const { store } = useContext(EmployeeContext);\n  return (\n    <tbody>\n        {store.selectedEmployees.map((employee, i) => \n            <TableRow \n                key={i} \n                image={employee.picture}\n                firstName={employee.firstname}\n                lastName={employee.lastname}\n                email={employee.email}\n                phone={employee.phone}\n                dob={new Date(employee.dob).toLocaleDateString()}\n            />\n        )}\n    </tbody>\n    );\n};\n\nexport default TableBody;\n","import React from \"react\";\nimport \"./style.css\";\nimport TableHeader from \"../TableHeader\";\nimport TableBody from \"../TableBody\";\n\n// Creating and wrapping other elements with table\nfunction Table() {\n  return (\n    <table className=\"table table-hover table-striped table-dark\">\n        <TableHeader />\n        <TableBody />\n    </table>\n    );\n};\n\nexport default Table;","import React from \"react\";\nimport Table from \"../Table\";\nimport \"./style.css\";\n\n// Container for the employee table\nfunction Container() {\n  return (\n    <div className=\"container table-responsive tableContainer\">\n       <Table />\n    </div>\n    );\n};\n\nexport default Container;","import React, { useEffect, useContext } from \"react\";\nimport API from \"../utils/API\";\nimport EmployeeContext from \"../utils/EmployeeContext\";\nimport Container from \"../components/Container\";\nimport { ALL_EMPLOYEES } from \"../utils/Variables\";\n\n// for our employee directory page displaying the data through the API call\nfunction Gallery() {\n    const { dispatch } = useContext(EmployeeContext);\n  \n    useEffect(() => {\n        loadEmployees();\n    },[]);\n\n    function loadEmployees() {\n        API.getEmployeesList()\n            .then(employees => {\n                dispatch({type: ALL_EMPLOYEES, payload: employees});\n            })\n            .catch(err => console.log(err));\n  };\n\n  return (\n      <div>\n          <Container />\n      </div>\n  );\n};\n\nexport default Gallery;","import React from \"react\";\nimport \"./style.css\";\n\n// Jumbotron\nfunction Header() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n            <h1 className=\"display-4 text-center\">Employee Directory</h1>\n        </div>\n    </div>\n  );\n}\n\nexport default Header;","import React, { useContext, useState, useEffect } from \"react\";\nimport EmployeeContext from \"../../utils/EmployeeContext\";\nimport { SEARCH_EMPLOYEES, CLEAR_SEARCH } from \"../../utils/Variables\"\nimport \"./style.css\";\n\n// User search input function\nfunction Search() {\n    // variable for dispatch to grab and execute specific actions\n    const { dispatch } = useContext(EmployeeContext);\n    // variable for the state of our search value\n    const [search, setSearch] = useState('');\n\n    // allows to see filtered results with every letter change in the search input\n    useEffect(() => {\n            dispatch({type: SEARCH_EMPLOYEES, payload: search});\n    }, [search]);\n\n    // search employees function, the dispatch we call to filter the results\n    function searchEmployees(e)  {\n        e.preventDefault();\n        dispatch({type: SEARCH_EMPLOYEES, payload: search});\n        setSearch(search);\n    };\n\n    // clears the search input field and returns to the initial state\n    function clearSearch(e)  {\n        e.preventDefault();\n        dispatch({type: CLEAR_SEARCH});\n        setSearch(\"\");\n    }\n\n  return (\n    <div className=\"container\">\n        <form>\n            <div className=\"form-group text-center\">\n                <label for=\"formGroupExampleInput\" className=\"searchTitle\">Search</label>\n                <input \n                    type=\"text\" \n                    value={search} \n                    onChange={e => setSearch(e.target.value)} \n                    className=\"form-control\" \n                    id=\"searchInput\" \n                    placeholder=\"Search Employee by Name\"\n                />\n                <button \n                    className=\"btn btn-dark\"\n                    id=\"searchBtn\"\n                    onClick={searchEmployees}>\n                        Search\n                </button>\n                <button \n                    className=\"btn btn-dark\" \n                    id=\"clearBtn\"\n                    onClick={clearSearch}>\n                        Clear Search\n                </button>\n            </div>\n        </form>\n    </div>\n    );\n};\n\nexport default Search;","// having our initial state and our action types, using dispatch and specifying each of our action types to be executed\nimport { SORT_EMPLOYEES_ASCEND, SORT_EMPLOYEES_DESCEND, CLEAR_SEARCH, SEARCH_EMPLOYEES, ALL_EMPLOYEES } from \"./Variables\"\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case SEARCH_EMPLOYEES:\n            // if the input field is an empty string, return to the initial state else, filter employee results\n            if(action.payload === \"\") {\n                return {\n                    ...state,\n                    selectedEmployees: \n                        state.employees}\n            } else if(action.payload !== \"\") {\n                return {\n                    ...state,\n                    selectedEmployees: \n                        state.employees.filter(employee => {\n                        const name = employee.firstname + \" \" + employee.lastname;\n                        return name.toLowerCase().includes(action.payload.toLowerCase());\n                    })\n                };\n            };\n            break;\n            \n        case SORT_EMPLOYEES_ASCEND:\n            // set our employees firstname in ascending order from A to Z\n            return {\n                ...state,\n                selectedEmployees:\n                state.employees.sort((a,b) => (a.firstname > b.firstname ? 1: -1))\n            };\n            case SORT_EMPLOYEES_DESCEND:\n                // set our employees firstname in descending order from Z to A\n            return {\n                ...state,\n                selectedEmployees:\n                state.employees.sort((a,b) => (b.firstname > a.firstname ? 1: -1))\n            };\n           \n        \n        case ALL_EMPLOYEES:\n            // loads the results of our employees\n            return {\n                employees: action.payload,\n                selectedEmployees: action.payload\n            };\n        \n        case CLEAR_SEARCH:\n            // when the user clears the input field, return to initial state displaying all the employees\n            return {\n                ...state,\n                selectedEmployees: state.employees\n            };\n\n        default:\n            throw new Error(`Invalid action type: ${action.type}`);\n        \n    };\n};\n","import './App.css';\nimport React, { useReducer } from \"react\";\nimport Gallery from \"./pages/Gallery\";\nimport Header from \"./components/Header\";\nimport Search from \"./components/Search\";\nimport EmployeeContext from './utils/EmployeeContext';\nimport { reducer } from \"./utils/Reducer\";\n\nfunction App() {\n\n  // setting our initial state\n  const initialState = {\n    employees: [],\n    selectedEmployees: []\n  };\n\n  // setting our store to the initial state and our dispatch to the actions stored in our reducer file\n  const [store, dispatch] = useReducer(reducer, initialState);\n\n  // wrapping our other children in the provider to give it access to our values store and dispatch globally\n  return (\n    <div className=\"App\">\n      <EmployeeContext.Provider value={{store, dispatch}}>\n        <Header />\n        <Search />\n        <Gallery />\n      </EmployeeContext.Provider>\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}